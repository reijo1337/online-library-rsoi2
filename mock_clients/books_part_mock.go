// Code generated by MockGen. DO NOT EDIT.
// Source: clients/books-part.go

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	gomock "github.com/golang/mock/gomock"
	clients "github.com/reijo1337/online-library-rsoi2/clients"
	reflect "reflect"
)

// MockBooksPartInterface is a mock of BooksPartInterface interface
type MockBooksPartInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBooksPartInterfaceMockRecorder
}

// MockBooksPartInterfaceMockRecorder is the mock recorder for MockBooksPartInterface
type MockBooksPartInterfaceMockRecorder struct {
	mock *MockBooksPartInterface
}

// NewMockBooksPartInterface creates a new mock instance
func NewMockBooksPartInterface(ctrl *gomock.Controller) *MockBooksPartInterface {
	mock := &MockBooksPartInterface{ctrl: ctrl}
	mock.recorder = &MockBooksPartInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBooksPartInterface) EXPECT() *MockBooksPartInterfaceMockRecorder {
	return m.recorder
}

// AddNewBook mocks base method
func (m *MockBooksPartInterface) AddNewBook(book clients.Book) (int32, error) {
	ret := m.ctrl.Call(m, "AddNewBook", book)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewBook indicates an expected call of AddNewBook
func (mr *MockBooksPartInterfaceMockRecorder) AddNewBook(book interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewBook", reflect.TypeOf((*MockBooksPartInterface)(nil).AddNewBook), book)
}

// GetBookByID mocks base method
func (m *MockBooksPartInterface) GetBookByID(ID int32) (*clients.Book, error) {
	ret := m.ctrl.Call(m, "GetBookByID", ID)
	ret0, _ := ret[0].(*clients.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID
func (mr *MockBooksPartInterfaceMockRecorder) GetBookByID(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockBooksPartInterface)(nil).GetBookByID), ID)
}

// ChangeBookStatusByID mocks base method
func (m *MockBooksPartInterface) ChangeBookStatusByID(ID int32, status bool) error {
	ret := m.ctrl.Call(m, "ChangeBookStatusByID", ID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeBookStatusByID indicates an expected call of ChangeBookStatusByID
func (mr *MockBooksPartInterfaceMockRecorder) ChangeBookStatusByID(ID, status interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBookStatusByID", reflect.TypeOf((*MockBooksPartInterface)(nil).ChangeBookStatusByID), ID, status)
}

// GetFreeBooks mocks base method
func (m *MockBooksPartInterface) GetFreeBooks() ([]clients.Book, error) {
	ret := m.ctrl.Call(m, "GetFreeBooks")
	ret0, _ := ret[0].([]clients.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreeBooks indicates an expected call of GetFreeBooks
func (mr *MockBooksPartInterfaceMockRecorder) GetFreeBooks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeBooks", reflect.TypeOf((*MockBooksPartInterface)(nil).GetFreeBooks))
}
