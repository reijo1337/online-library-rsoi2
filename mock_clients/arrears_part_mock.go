// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reijo1337/online-library-rsoi2/clients (interfaces: ArrearsPartInterface)

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	gomock "github.com/golang/mock/gomock"
	clients "github.com/reijo1337/online-library-rsoi2/clients"
	reflect "reflect"
)

// MockArrearsPartInterface is a mock of ArrearsPartInterface interface
type MockArrearsPartInterface struct {
	ctrl     *gomock.Controller
	recorder *MockArrearsPartInterfaceMockRecorder
}

// MockArrearsPartInterfaceMockRecorder is the mock recorder for MockArrearsPartInterface
type MockArrearsPartInterfaceMockRecorder struct {
	mock *MockArrearsPartInterface
}

// NewMockArrearsPartInterface creates a new mock instance
func NewMockArrearsPartInterface(ctrl *gomock.Controller) *MockArrearsPartInterface {
	mock := &MockArrearsPartInterface{ctrl: ctrl}
	mock.recorder = &MockArrearsPartInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArrearsPartInterface) EXPECT() *MockArrearsPartInterfaceMockRecorder {
	return m.recorder
}

// CloseArrearByID mocks base method
func (m *MockArrearsPartInterface) CloseArrearByID(arg0 int32) error {
	ret := m.ctrl.Call(m, "CloseArrearByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseArrearByID indicates an expected call of CloseArrearByID
func (mr *MockArrearsPartInterfaceMockRecorder) CloseArrearByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseArrearByID", reflect.TypeOf((*MockArrearsPartInterface)(nil).CloseArrearByID), arg0)
}

// GetArrearByID mocks base method
func (m *MockArrearsPartInterface) GetArrearByID(arg0 int32) (*clients.Arrear, error) {
	ret := m.ctrl.Call(m, "GetArrearByID", arg0)
	ret0, _ := ret[0].(*clients.Arrear)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArrearByID indicates an expected call of GetArrearByID
func (mr *MockArrearsPartInterfaceMockRecorder) GetArrearByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrearByID", reflect.TypeOf((*MockArrearsPartInterface)(nil).GetArrearByID), arg0)
}

// GetArrearsPaging mocks base method
func (m *MockArrearsPartInterface) GetArrearsPaging(arg0, arg1, arg2 int32) ([]clients.Arrear, error) {
	ret := m.ctrl.Call(m, "GetArrearsPaging", arg0, arg1, arg2)
	ret0, _ := ret[0].([]clients.Arrear)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArrearsPaging indicates an expected call of GetArrearsPaging
func (mr *MockArrearsPartInterfaceMockRecorder) GetArrearsPaging(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrearsPaging", reflect.TypeOf((*MockArrearsPartInterface)(nil).GetArrearsPaging), arg0, arg1, arg2)
}

// NewArrear mocks base method
func (m *MockArrearsPartInterface) NewArrear(arg0, arg1 int32) (*clients.Arrear, error) {
	ret := m.ctrl.Call(m, "NewArrear", arg0, arg1)
	ret0, _ := ret[0].(*clients.Arrear)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewArrear indicates an expected call of NewArrear
func (mr *MockArrearsPartInterfaceMockRecorder) NewArrear(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewArrear", reflect.TypeOf((*MockArrearsPartInterface)(nil).NewArrear), arg0, arg1)
}
