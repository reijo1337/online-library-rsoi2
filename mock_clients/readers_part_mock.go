// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reijo1337/online-library-rsoi2/clients (interfaces: ReadersPartInterface)

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	gomock "github.com/golang/mock/gomock"
	clients "github.com/reijo1337/online-library-rsoi2/clients"
	reflect "reflect"
)

// MockReadersPartInterface is a mock of ReadersPartInterface interface
type MockReadersPartInterface struct {
	ctrl     *gomock.Controller
	recorder *MockReadersPartInterfaceMockRecorder
}

// MockReadersPartInterfaceMockRecorder is the mock recorder for MockReadersPartInterface
type MockReadersPartInterfaceMockRecorder struct {
	mock *MockReadersPartInterface
}

// NewMockReadersPartInterface creates a new mock instance
func NewMockReadersPartInterface(ctrl *gomock.Controller) *MockReadersPartInterface {
	mock := &MockReadersPartInterface{ctrl: ctrl}
	mock.recorder = &MockReadersPartInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadersPartInterface) EXPECT() *MockReadersPartInterfaceMockRecorder {
	return m.recorder
}

// GetAllReaders mocks base method
func (m *MockReadersPartInterface) GetAllReaders() ([]clients.Reader, error) {
	ret := m.ctrl.Call(m, "GetAllReaders")
	ret0, _ := ret[0].([]clients.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReaders indicates an expected call of GetAllReaders
func (mr *MockReadersPartInterfaceMockRecorder) GetAllReaders() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReaders", reflect.TypeOf((*MockReadersPartInterface)(nil).GetAllReaders))
}

// GetReaderByID mocks base method
func (m *MockReadersPartInterface) GetReaderByID(arg0 int32) (clients.Reader, error) {
	ret := m.ctrl.Call(m, "GetReaderByID", arg0)
	ret0, _ := ret[0].(clients.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReaderByID indicates an expected call of GetReaderByID
func (mr *MockReadersPartInterfaceMockRecorder) GetReaderByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReaderByID", reflect.TypeOf((*MockReadersPartInterface)(nil).GetReaderByID), arg0)
}

// GetReaderByName mocks base method
func (m *MockReadersPartInterface) GetReaderByName(arg0 string) (clients.Reader, error) {
	ret := m.ctrl.Call(m, "GetReaderByName", arg0)
	ret0, _ := ret[0].(clients.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReaderByName indicates an expected call of GetReaderByName
func (mr *MockReadersPartInterfaceMockRecorder) GetReaderByName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReaderByName", reflect.TypeOf((*MockReadersPartInterface)(nil).GetReaderByName), arg0)
}

// RegisterReader mocks base method
func (m *MockReadersPartInterface) RegisterReader(arg0 string) (*clients.Reader, error) {
	ret := m.ctrl.Call(m, "RegisterReader", arg0)
	ret0, _ := ret[0].(*clients.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterReader indicates an expected call of RegisterReader
func (mr *MockReadersPartInterfaceMockRecorder) RegisterReader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterReader", reflect.TypeOf((*MockReadersPartInterface)(nil).RegisterReader), arg0)
}
